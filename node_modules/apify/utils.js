"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSystemInfo = getSystemInfo;
exports.checkCrawleeVersion = checkCrawleeVersion;
const node_os_1 = require("node:os");
const node_path_1 = require("node:path");
// @ts-ignore if we enable resolveJsonModule, we end up with `src` folder in `dist`
const package_json_1 = require("@crawlee/core/package.json");
// @ts-ignore if we enable resolveJsonModule, we end up with `src` folder in `dist`
const package_json_2 = require("apify-client/package.json");
const fs_extra_1 = require("fs-extra");
// @ts-ignore if we enable resolveJsonModule, we end up with `src` folder in `dist`
const package_json_3 = require("./package.json");
/**
 * Gets info about system, node version and apify package version.
 * @internal
 */
function getSystemInfo() {
    return {
        apifyVersion: package_json_3.version,
        apifyClientVersion: package_json_2.version,
        crawleeVersion: package_json_1.version,
        osType: (0, node_os_1.type)(),
        nodeVersion: process.version,
    };
}
/**
 * @internal
 */
function checkCrawleeVersion() {
    const resolve = (name) => {
        try {
            return require.resolve(name);
        }
        catch {
            return name;
        }
    };
    const paths = [
        // when users install `crawlee` package, we need to check its core dependency
        (0, node_path_1.normalize)(`${process.cwd()}/node_modules/crawlee/node_modules/@crawlee/core/package.json`),
        // when users install `@crawlee/cheerio` or other crawler package, we need to check the dependency under basic crawler package
        (0, node_path_1.normalize)(`${process.cwd()}/node_modules/@crawlee/basic/node_modules/@crawlee/core/package.json`),
        // also check paths via `require.resolve` to support pnpm
        resolve('crawlee/package.json'),
        resolve('@crawlee/basic/package.json'),
    ];
    for (const path of paths) {
        // ignore unresolved paths or paths that are not in the project directory
        if (!(0, fs_extra_1.pathExistsSync)(path) || !path.startsWith(process.cwd())) {
            continue;
        }
        let version;
        try {
            version = (0, fs_extra_1.readJSONSync)(path).version;
        }
        catch {
            //
        }
        if (version != null && version !== package_json_1.version) {
            const details = `User installed version (${version}) found in ${path}.\nSDK uses ${package_json_1.version} from ${require.resolve('@crawlee/core')}`;
            throw new Error(`Detected incompatible Crawlee version used by the SDK. User installed ${version} but the SDK uses ${package_json_1.version}.\n\n${details}`);
        }
    }
}
//# sourceMappingURL=utils.js.map