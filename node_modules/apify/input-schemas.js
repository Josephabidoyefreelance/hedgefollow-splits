"use strict";
// TODO: https://github.com/apify/apify-shared-js/issues/547
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultsFromInputSchema = exports.readInputSchema = exports.noActorInputSchemaDefinedMarker = void 0;
const tslib_1 = require("tslib");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const node_process_1 = tslib_1.__importDefault(require("node:process"));
// These paths are used *if* there is no `input` field in the actor.json configuration file!
const DEFAULT_INPUT_SCHEMA_PATHS = [
    ['.actor', 'INPUT_SCHEMA.json'],
    ['INPUT_SCHEMA.json'],
    ['.actor', 'input_schema.json'],
    ['input_schema.json'],
];
const ACTOR_SPECIFICATION_FOLDER = '.actor';
const LOCAL_CONFIG_NAME = 'actor.json';
const readJSONIfExists = (path) => {
    if ((0, node_fs_1.existsSync)(path)) {
        const content = (0, node_fs_1.readFileSync)(path, 'utf8');
        return JSON.parse(content);
    }
    return null;
};
/**
 * @ignore
 */
exports.noActorInputSchemaDefinedMarker = Symbol.for('apify.noActorInputSchemaDefined');
const readInputSchema = () => {
    const localConfig = readJSONIfExists((0, node_path_1.join)(node_process_1.default.cwd(), ACTOR_SPECIFICATION_FOLDER, LOCAL_CONFIG_NAME));
    // Input schema nested in the actor config
    if (typeof localConfig?.input === 'object') {
        return localConfig.input;
    }
    // Input schema path from the actor config
    if (typeof localConfig?.input === 'string') {
        const fullPath = (0, node_path_1.join)(node_process_1.default.cwd(), ACTOR_SPECIFICATION_FOLDER, localConfig.input);
        return readJSONIfExists(fullPath);
    }
    // Try to find it from possible default paths
    for (const path of DEFAULT_INPUT_SCHEMA_PATHS) {
        const fullPath = (0, node_path_1.join)(node_process_1.default.cwd(), ...path);
        const result = readJSONIfExists(fullPath);
        if (result) {
            return result;
        }
    }
    // If we are in an Actor context, BUT we do not have an input schema defined, we want to skip the warning
    if (!localConfig?.input) {
        return exports.noActorInputSchemaDefinedMarker;
    }
    return null;
};
exports.readInputSchema = readInputSchema;
const getDefaultsFromInputSchema = (inputSchema) => {
    const defaults = {};
    for (const [key, fieldSchema] of Object.entries(inputSchema.properties)) {
        if (fieldSchema.default !== undefined) {
            defaults[key] = fieldSchema.default;
        }
    }
    return defaults;
};
exports.getDefaultsFromInputSchema = getDefaultsFromInputSchema;
//# sourceMappingURL=input-schemas.js.map